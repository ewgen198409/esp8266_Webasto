#include <GyverNTC.h> // Включаем библиотеку GyverNTC

// --- Глобальные константы для настройки NTC датчика ---
// Эти значения должны соответствовать характеристикам вашего NTC терморезистора
// и параметрам вашей схемы.
// Использование uint32_t для сопротивлений, uint16_t для B-коэффициента и разрешения ADC
// для предотвращения потенциальных переполнений и соответствия возможным типам библиотеки.
const uint32_t NTC_R0 = 52622UL;     // Номинальное сопротивление NTC при 25°C (в Омах), UL для unsigned long literal
const uint16_t NTC_B = 3950;          // B-коэффициент NTC (из даташита терморезистора)
const uint32_t NTC_SERIES_RESISTOR = 150000UL; // Сопротивление последовательного резистора (в Омах)
const uint16_t ADC_BITS_RESOLUTION = 10; // Разрешение ADC в битах (10 для 0-1023)

/**
 * @brief Читает значение температуры с высокотемпературного датчика NTC с использованием GyverNTC.
 *
 * Эта функция использует объект GyverNTC для расчета температуры в градусах Цельсия.
 * Библиотека GyverNTC сама выполняет считывание аналогового значения с пина,
 * указанного при инициализации, и применяет уравнение Steinhart-Hart.
 *
 * @param temp_pin Аналоговый пин, к которому подключен датчик NTC.
 * @param exhaust Флаг, указывающий, является ли это датчиком выхлопа (в текущей
 * реализации не используется, но сохранен для совместимости).
 * @return Температура в градусах Цельсия или -999.0f в случае ошибки измерения/некорректных показаний.
 */
float get_wabasto_temp(int temp_pin, int exhaust) {
    // Статический объект GyverNTC, инициализируется только один раз при первом вызове функции.
    // Параметры передаются в конструктор в соответствии с найденной сигнатурой:
    // GyverNTC(uint8_t pin, uint32_t R, uint16_t B, uint8_t t = 25, uint32_t Rt = 10000, uint8_t res = 10)
    static GyverNTC ntc(
        (uint8_t)temp_pin,      // Аналоговый пин
        NTC_R0,                 // Номинальное сопротивление NTC при 25°C
        NTC_B,                  // B-коэффициент NTC
        25,                     // Температура, при которой R0 (по умолчанию 25°C)
        NTC_SERIES_RESISTOR,    // Сопротивление последовательного резистора
        ADC_BITS_RESOLUTION     // Разрешение ADC в битах (например, 10 для 0-1023)
    );

    // --- Получение температуры с помощью GyverNTC ---
    // Метод getTemp() библиотеки GyverNTC автоматически выполняет аналоговое чтение
    // с пина, указанного в конструкторе, и все расчеты Steinhart-Hart.
    float temperature_celsius = ntc.getTemp();

    // --- Обработка возможных ошибок или крайних значений от GyverNTC ---
    // Библиотека GyverNTC может возвращать специфические значения (например, 85.0f или -127.0f)
    // для индикации выхода за пределы диапазона или ошибок. Мы преобразуем их в -999.0f
    // для совместимости с вашей существующей логикой обработки ошибок в get_temp().
    if (temperature_celsius == 85.0f || temperature_celsius == -127.0f) {
        return -999.0f; // Возвращаем код ошибки, если GyverNTC сообщил о проблеме
    }

    return temperature_celsius;
}
