// Предполагается, что exhaust_temp_pin, exhaust_temp и exhaust_temp_sec
// объявлены как глобальные переменные или доступны в этом файле.
// Например:
// extern int exhaust_temp_pin;
// extern float exhaust_temp;
// extern float exhaust_temp_sec[10]; // Массив для истории температуры

// Объявление функции get_wabasto_temp, если она находится в другом файле
extern float get_wabasto_temp(int temp_pin, int exhaust);

void temp_data() {
  // Эта функция обновляет временные переменные, связанные с температурой.

  static unsigned long timer; // Статическая переменная для хранения времени для интервала обновления.

  // Проверка на переполнение таймера millis().
  // Если текущее время меньше сохраненного таймера, это означает, что millis()
  // переполнился и сбросился. В этом случае обновляем таймер.
  if (millis() < timer) {
    timer = millis(); // Обновляем таймер, чтобы избежать больших задержек.
  }

  // Вызов функции get_wabasto_temp для получения текущей температуры.
  // Функция get_wabasto_temp (с GyverNTC) уже выполняет внутреннее усреднение показаний ADC.
  float current_raw_temp = get_wabasto_temp(exhaust_temp_pin, 1);

  // Применяем скользящее среднее для дальнейшего сглаживания показаний температуры.
  // Это помогает уменьшить кратковременные колебания и получить более стабильное значение.
  // Если current_raw_temp является кодом ошибки (-999.0f), он будет усреднен
  // с предыдущими значениями, что соответствует поведению оригинальной get_temp.
  exhaust_temp = (9 * exhaust_temp + current_raw_temp) / 10;

  // --- Проверка на разумные значения и ошибки ---
  // Эти проверки перенесены из оригинальной функции get_temp.
  // Они применяются к уже усредненной температуре exhaust_temp.
  if (exhaust_temp > 900) {
    // Если температура превышает 900 градусов, ограничиваем ее максимальным значением.
    exhaust_temp = 900;
  } else if (exhaust_temp < -40 && exhaust_temp > -500) {
    // Если температура ниже -40 градусов, но не является кодом ошибки (-500 или ниже),
    // ограничиваем ее минимальным разумным значением.
    exhaust_temp = -40;
  } else if (exhaust_temp <= -500) {
    // Если температура является кодом ошибки (-500 или ниже), устанавливаем ее в -999.
    // Это позволяет сигнализировать о проблеме с датчиком или измерением.
    exhaust_temp = -999; // Код ошибки
  }

  // Обновление данных каждую секунду.
  // Проверяем, прошла ли одна секунда с момента последнего обновления.
  if (millis() > timer + 1000) {
    timer = millis(); // Обновляем таймер для следующего интервала.

    // Обновление истории температуры выхлопа:
    // Сдвигаем все предыдущие значения в массиве на одну позицию,
    // удаляя самое старое значение.
    for (int i = 9; i >= 1; i--) {
      exhaust_temp_sec[i] = exhaust_temp_sec[i - 1];
    }
    // Добавляем текущее (обработанное и усредненное) значение температуры
    // в начало массива истории.
    exhaust_temp_sec[0] = exhaust_temp;
  }
}
